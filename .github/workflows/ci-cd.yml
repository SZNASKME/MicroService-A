name: Build and Deploy MicroService-A

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ghcr.io/sznaskme/microservice-a/orders

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ./services/orders
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-development:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_DEV }}

    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Deploy to Development
      run: |
        helm upgrade microservice-a-development ./helm/microservice-a \
          --install \
          --namespace development \
          --create-namespace \
          --values ./helm/environments/development.yaml \
          --set image.tag=${{ github.sha }} \
          --wait \
          --timeout=300s

    - name: Verify Deployment
      run: |
        kubectl get pods -n development -l app.kubernetes.io/name=microservice-a
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=microservice-a -n development --timeout=300s

  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Configure kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_PROD }}

    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Deploy to Production
      run: |
        # Extract version from tag (remove 'v' prefix)
        VERSION=${GITHUB_REF#refs/tags/v}
        
        helm upgrade microservice-a-production ./helm/microservice-a \
          --install \
          --namespace production \
          --create-namespace \
          --values ./helm/environments/production.yaml \
          --set image.tag=v$VERSION \
          --wait \
          --timeout=600s

    - name: Verify Production Deployment
      run: |
        kubectl get pods -n production -l app.kubernetes.io/name=microservice-a
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=microservice-a -n production --timeout=600s
        
        # Health check
        kubectl get service -n production -l app.kubernetes.io/name=microservice-a
        
    - name: Run Smoke Tests
      run: |
        # Port forward for testing
        kubectl port-forward -n production service/microservice-a-production 8080:80 &
        PF_PID=$!
        sleep 10
        
        # Basic health check
        curl -f http://localhost:8080/health || exit 1
        curl -f http://localhost:8080/metrics || exit 1
        
        # Cleanup
        kill $PF_PID

  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: './services/orders'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  helm-lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Helm
      uses: azure/setup-helm@v3
      with:
        version: '3.12.0'

    - name: Lint Helm chart
      run: |
        helm lint ./helm/microservice-a
        helm template test ./helm/microservice-a --values ./helm/environments/development.yaml
        helm template test ./helm/microservice-a --values ./helm/environments/production.yaml
