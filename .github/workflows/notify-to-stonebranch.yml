name: deploy-via-stonebranch-uc

on:
  # จะให้ auto-trigger ตอนมีการแก้ service นี้ก็ได้ (เอาออกได้ถ้าไม่ต้องการ)
  push:
    branches: [main]
    paths: [services/orders/**]
  workflow_dispatch:
    inputs:
      service:
        description: Service name (folder under services/)
        default: orders
      target_env:
        description: Target environment
        type: choice
        options: [staging, production]
        default: staging
      image_tag:
        description: Image tag to deploy (leave blank to use commit SHA)
        required: false
      reason:
        description: Reason/notes for audit (optional)
        required: false

permissions:
  contents: read
  deployments: write

jobs:
  notify-uc:
    runs-on: ubuntu-latest

    # ใช้ environment secrets/approval ตาม env ที่เลือก (ห้ามอ้าง env.* ที่นี่)
    environment: ${{ github.event_name == 'workflow_dispatch' && inputs.target_env || 'staging' }}

    # กันดีพลอยซ้อนต่อ env+service (ห้ามอ้าง env.* ที่นี่)
    concurrency:
      group: ${{ (github.event_name == 'workflow_dispatch' && inputs.target_env || 'staging') }}-${{ (github.event_name == 'workflow_dispatch' && inputs.service || 'orders') }}
      cancel-in-progress: false

    steps:
      - uses: actions/checkout@v4

      # เตรียมตัวแปรใช้งาน (lowercase repo + image ที่จะ deploy)
      - name: Prepare variables
        run: |
          SERVICE="${{ github.event_name == 'workflow_dispatch' && inputs.service || 'orders' }}"
          TARGET_ENV="${{ github.event_name == 'workflow_dispatch' && inputs.target_env || 'staging' }}"
          # ถ้าไม่ได้กรอก image_tag จะใช้ commit SHA ปัจจุบันเป็น tag (ต้องมี image นี้อยู่แล้ว)
          IMAGE_TAG="${{ github.event_name == 'workflow_dispatch' && inputs.image_tag || github.sha }}"
          REPO="${GITHUB_REPOSITORY}"
          REPO_LC="${GITHUB_REPOSITORY,,}"

          echo "SERVICE=$SERVICE" >> $GITHUB_ENV
          echo "TARGET_ENV=$TARGET_ENV" >> $GITHUB_ENV
          echo "REPO=$REPO" >> $GITHUB_ENV
          echo "REPO_LC=$REPO_LC" >> $GITHUB_ENV
          echo "IMAGE=ghcr.io/$REPO_LC/$SERVICE:$IMAGE_TAG" >> $GITHUB_ENV
          echo "REASON=${{ github.event_name == 'workflow_dispatch' && inputs.reason || '' }}" >> $GITHUB_ENV

      # สร้าง GitHub Deployment record ผูกกับ commit นี้ (ให้ UC ไปอัปเดตสถานะต่อ)
      - name: Create GitHub Deployment
        id: gh_deploy
        uses: actions/github-script@v7
        env:
          TARGET_ENV: ${{ env.TARGET_ENV }}
          SERVICE: ${{ env.SERVICE }}
        with:
          script: |
            const res = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: process.env.TARGET_ENV,
              auto_merge: false,
              required_contexts: [],
              description: `Deploy ${process.env.SERVICE} via Stonebranch UC`,
              production_environment: process.env.TARGET_ENV === 'production'
            });
            core.setOutput('id', res.data.id);

      # แจ้ง Stonebranch UC ให้ "deploy" image ที่ระบุ (ไม่ build)
      - name: Notify Stonebranch UC to deploy
        env:
          UC_URL:   ${{ secrets.UC_URL }}    # เช่น https://uc.example.com
          UC_TOKEN: ${{ secrets.UC_TOKEN }}  # token สำหรับ Universal Event push
          UC_EVENT: ${{ secrets.UC_EVENT }}  # ชื่อ/รหัส universal event endpoint
        run: |
          set -euo pipefail
          DEPLOY_ID="${{ steps.gh_deploy.outputs.id }}"
          # payload JSON ส่งให้ UC
          printf -v PAYLOAD '{
            "event": "deploy_request",
            "service": "%s",
            "env": "%s",
            "sha": "%s",
            "image": "%s",
            "repo": "%s",
            "repo_lc": "%s",
            "github_deployment_id": "%s",
            "reason": "%s",
            "metadata": { "source": "github-actions" }
          }' \
          "$SERVICE" "$TARGET_ENV" "$GITHUB_SHA" "$IMAGE" "$REPO" "$REPO_LC" "$DEPLOY_ID" "$REASON"

          echo "Payload: $PAYLOAD"

          curl -sS -X POST \
            "$UC_URL/uc/resources/universalevent/push/$UC_EVENT?access_token=$UC_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD"
