name: build-orders-and-notify-uc

on:
  push:
    branches: [main]
    paths: [services/orders/**]
  workflow_dispatch:
    inputs:
      service:
        description: Service name
        default: orders
      target_env:
        description: Target environment
        type: choice
        options: [staging, production]
        default: staging

env:
  SERVICE: orders

permissions:
  contents: read
  packages: write
  deployments: write

jobs:
  build-and-send:
    runs-on: ubuntu-latest
    
    env:
      SERVICE: ${{ github.event_name == 'workflow_dispatch' && inputs.service || env.SERVICE }}
      TARGET_ENV: ${{ github.event_name == 'workflow_dispatch' && inputs.target_env || 'staging' }}
    
    environment: ${{ env.TARGET_ENV }}
    
    # ✅ ย้ายมาวางที่ระดับ job
    concurrency:
      group: ${{ env.TARGET_ENV }}-${{ env.SERVICE }}
      cancel-in-progress: false

    steps:
      - uses: actions/checkout@v4
      - name: Prepare image repo (lowercase)
        run: |
          echo "IMAGE_REPO=ghcr.io/${GITHUB_REPOSITORY,,}/${SERVICE}" >> $GITHUB_ENV
          
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push image
        uses: docker/build-push-action@v5
        with:
          context: services/${{ env.SERVICE }}
          push: true
          tags: |
            ${{ env.IMAGE_REPO }}:${{ github.sha }}
            ${{ env.IMAGE_REPO }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create GitHub Deployment
        id: gh_deploy
        uses: actions/github-script@v7
        with:
          script: |
            const res = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: process.env.TARGET_ENV,
              auto_merge: false,
              required_contexts: [],
              description: `Deploy ${process.env.SERVICE} via Stonebranch`,
              production_environment: process.env.TARGET_ENV === 'production'
            });
            core.setOutput('id', res.data.id);

      - name: Notify Stonebranch UC to deploy
        env:
          UC_URL:   ${{ secrets.UC_URL }}
          UC_TOKEN: ${{ secrets.UC_TOKEN }}
          UC_EVENT: ${{ secrets.UC_EVENT }}
        run: |
          set -euo pipefail
          IMAGE="${IMAGE_REPO}:${GITHUB_SHA}"
          DEPLOY_ID="${{ steps.gh_deploy.outputs.id }}"

          # payload JSON (ชัดเจนและครบ)
          printf -v PAYLOAD '{"event":"deploy_request","service":"%s","env":"%s","sha":"%s","image":"%s","github_deployment_id":"%s"}' \
            "$SERVICE" "$TARGET_ENV" "$GITHUB_SHA" "$IMAGE" "$DEPLOY_ID"
          echo "Payload: $PAYLOAD"
          
          curl -sS -X POST \
            "$UC_URL/uc/resources/universalevent/push/$UC_EVENT?access_token=$UC_TOKEN \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD"
